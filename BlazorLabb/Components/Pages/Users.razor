@page "/users"
@rendermode InteractiveServer

<PageTitle>Users</PageTitle>

<h3>User Data Storage</h3>

@if (loadingNotDone)
{
	<p style="font-size: 36px; color: red;">@(new MarkupString(loadingMessage))</p>
}
else if (localDataBase)
{
	<table class="table">
		<thead>
		<tr>
			<th>ID</th>
			<th>Name</th>
			<th>Email</th>
			<th>Street</th>
			<th>City</th>
			<th>ZipCode</th>
			<th>Company</th>
			<th>Company Catchphrase</th>
		</tr>
		</thead>
		<tbody>
		@if (!allUsers)
		{
			@foreach (var user in userList.Take(5))
			{
				<tr>
					<td>@user.Id</td>
					<td>@user.Name</td>
					<td>@user.Email</td>
					<td>@(user.Address?.Street ?? "N/A")</td>
					<td>@(user.Address?.City ?? "N/A")</td>
					<td>@(user.Address?.Zip ?? "N/A")</td>
					<td>@(user.Company?.Name ?? "N/A")</td>
					<td>@(user.Company?.CatchPhrase ?? "N/A")</td>
				</tr>
			}
		}
		else if (allUsers)
		{
			foreach (var user in userList)
			{
				<tr>
					<td>@user.Id</td>
					<td>@user.Name</td>
					<td>@user.Email</td>
					<td>@(user.Address?.Street ?? "N/A")</td>
					<td>@(user.Address?.City ?? "N/A")</td>
					<td>@(user.Address?.Zip ?? "N/A")</td>
					<td>@(user.Company?.Name ?? "N/A")</td>
					<td>@(user.Company?.CatchPhrase ?? "N/A")</td>
				</tr>
			}
		}
			
		</tbody>
	</table>
	


}
else
{
	<table class="table">
		<thead>
		<tr>
			<th>ID</th>
			<th>Name</th>
			<th>Email</th>
			<th>Street</th>
			<th>City</th>
			<th>ZipCode</th>
			<th>Company</th>
			<th>Company Catchphrase</th>
		</tr>
		</thead>
		<tbody>
			@if (!allUsers)
			{
				@foreach (var user in userList.Take(5))
				{
					<tr>
						<td>@user.Id</td>
						<td>@user.Name</td>
						<td>@user.Email</td>
						<td>@(user.Address?.Street ?? "N/A")</td>
						<td>@(user.Address?.City ?? "N/A")</td>
						<td>@(user.Address?.Zip ?? "N/A")</td>
						<td>@(user.Company?.Name  ?? "N/A")</td>
						<td>@(user.Company?.CatchPhrase ?? "N/A")</td>
					</tr>
				}
			}
			else if (allUsers)
			{
				foreach (var user in userList)
				{
					<tr>
						<td>@user.Name</td>
						<td>@user.Email</td>
						<td>@(user.Address?.Street ?? "N/A")</td>
						<td>@(user.Address?.City ?? "N/A")</td>
						<td>@(user.Address?.Zip ?? "N/A")</td>
						<td>@(user.Company?.Name ?? "N/A")</td>
						<td>@(user.Company?.CatchPhrase ?? "N/A")</td>
					</tr>
				}
			}

		</tbody>
	</table>
}
<button class="btn btn-primary" @onclick="ToggleListView">@btnMessage</button>
<button class="btn btn-primary" @onclick="OnSortButtonClick">@sortBtnMessage</button>
<button class="btn btn-primary" @onclick="ChangeUserRepo">@changeUserRepo</button>

@code {
	List<IUser> userList = new();
	private string loadingMessage = "Loading";
	private bool loadingNotDone = true;
	private bool localDataBase = true;
	private string changeUserRepo = "Change User Repository";
	private bool allUsers;
	private string btnMessage = "Toggle Full List View";
	private bool sortCompanyName = false;
	private string sortBtnMessage = "Sort by Company Name";

	protected override void OnInitialized()
	{
		userList = UserServices.GetUsers();
		userList = SortUsersByName(userList);
		_ =SimulateLoading();
	}

	private async Task SimulateLoading()
	{
		for (int i = 0; i < 5; i++)
		{
			var colors = new[] { "purple", "blue", "green", "orange", "red" };
			await Task.Delay(500); 
			loadingMessage += $"<span style='color:{colors[i]};'>.</span>";
			StateHasChanged();
		}

		loadingNotDone = false;
		StateHasChanged();
	}

	private List<IUser> SortUsersByName(List<IUser> userList)
	{
		return userList.OrderBy(user => user.Name).ToList();
	}
	private List<IUser> SortUsersByCompanyName(List<IUser> userList)
	{
		return userList.OrderBy(user => user.Company?.Name).ToList();
	}

	private void OnSortButtonClick()
	{
		if (!sortCompanyName)
		{
			userList = SortUsersByCompanyName(userList);
			sortBtnMessage = "Sort by Name";
		}
		else
		{
			userList = SortUsersByName(userList);
			sortBtnMessage = "Sort by Company name";
		}

		sortCompanyName = !sortCompanyName;
		StateHasChanged();
	}
	private async void ChangeUserRepo()
	{
		loadingNotDone = true;
		_ = SimulateLoading();

		if (!localDataBase)
		{
			userList = UserServices.GetUsers();
			changeUserRepo = "Fetch Local Users";
			localDataBase = true;
		}
		else if (localDataBase)
		{
			var apiDataRep = new APIDataRepository(new HttpClient());
			var repoUsers = await apiDataRep.GetUsers();
			userList = repoUsers.Select(dataRepoUser => (IUser)dataRepoUser).ToList();
			
			changeUserRepo = "Fetch Users from API";
			localDataBase = false;
		}

		StateHasChanged();
	}

	

	private void ToggleListView()
	{
		if (!allUsers)
		{
			allUsers = true;
			btnMessage = "Toggle Small List View";
		}
		else if (allUsers)
		{
			allUsers = false;
			btnMessage = "Toggle Full List View";
		}
	}

	
}
